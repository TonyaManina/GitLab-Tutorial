Squaring.c
#include <stdio.h>
#define NMAX 10

int input(int *a, int *n);
void output(int *a, int n);
void squaring(int *a, int n);

int main() {
    int n, data[NMAX];
    if (input(data, &n)) {
        // printf("OK");
        squaring(data, n);
        output(data, n);
    } else {
        printf("n/a");
    }

    return 0;
}

int input(int *a, int *n) {
    char term;
    int return_code = 1;
    if (scanf("%d%c", n, &term) != 2 || term != '\n' || *n > NMAX || *n <= 0) {
        // printf("n/a");
        return_code = 0;
    } else {
        for (int *p = a; p - a < *n; p++) {
            if (p - a == *n - 1) {
                if (scanf("%d%c", p, &term) != 2 || term != '\n') {
                    // printf("n/a");
                    return_code = 0;
                }
            } else {
                if (scanf("%d%c", p, &term) != 2 || (term != ' ' && term != '\n')) {
                    // printf("n/a");
                    return_code = 0;
                    break;
                }
            }
        }
    }
    return return_code;
}

void output(int *a, int n) {
    for (int i = 0; i < n; i++) {
        if (i == n - 1) {
            printf("%d", a[i]);
        } else {
            printf("%d ", a[i]);
        }
    }
}

void squaring(int *a, int n) {
    for (int i = 0; i < n; i++) {
        a[i] = a[i] * a[i];
    }
}

3. Stat.c

#include <stdio.h>
#define NMAX 10

int input(int *a, int *n);
void output(int *a, int n);
int max(int *a, int n);
int min(int *a, int n);
double mean(int *a, int n);
double variance(int *a, int n);

void output_result(int max_v, int min_v, double mean_v, double variance_v);

int main() {
    int n, data[NMAX];
    if (input(data, &n)) {
        output(data, n);
        printf("\n");
        output_result(max(data, n), min(data, n), mean(data, n), variance(data, n));
    } else {
        printf("n/a");
    }

    return 0;
}

int input(int *a, int *n) {
    char term;
    int return_code = 1;
    if (scanf("%d%c", n, &term) != 2 || term != '\n' || *n > NMAX || *n <= 0) {
        // printf("n/a");
        return_code = 0;
    } else {
        for (int *p = a; p - a < *n; p++) {
            if (p - a == *n - 1) {
                if (scanf("%d%c", p, &term) != 2 || term != '\n') {
                    // printf("n/a");
                    return_code = 0;
                }
            } else {
                if (scanf("%d%c", p, &term) != 2 || (term != ' ' && term != '\n')) {
                    // printf("n/a");
                    return_code = 0;
                    break;
                }
            }
        }
    }
    return return_code;
}

void output(int *a, int n) {
    for (int i = 0; i < n; i++) {
        if (i == n - 1) {
            printf("%d", a[i]);
        } else {
            printf("%d ", a[i]);
        }
    }
}

int max(int *a, int n) {
    int maximum = a[0];
    for (int i = 1; i < n; i++) {
        if (a[i] > maximum) maximum = a[i];
    }
    return maximum;
}

int min(int *a, int n) {
    int minimum = a[0];
    for (int i = 1; i < n; i++) {
        if (a[i] < minimum) minimum = a[i];
    }
    return minimum;
}

double mean(int *a, int n) {
    double expected_value = 0;
    double doub_n = (double)n;
    for (int i = 0; i < n; i++) expected_value += a[i];
    expected_value = expected_value / doub_n;
    return expected_value;
}

double variance(int *a, int n) {
    double dispersion = 0;
    double doub_n = (double)n;
    double expected_value = mean(a, n);
    for (int i = 0; i < n; i++) dispersion += (a[i] - expected_value) * (a[i] - expected_value);
    dispersion = dispersion / doub_n;
    return dispersion;
}

void output_result(int max_v, int min_v, double mean_v, double variance_v) {
    printf("%d %d %.6f %.6f", max_v, min_v, mean_v, variance_v);
}

4. search.c
/*
    Search module for the desired value from data array.

    Returned value must be:
        - "even"
        - ">= mean"
        - "<= mean + 3 * sqrt(variance)"
        - "!= 0"

        OR

        0
*/

#include <math.h>
#include <stdio.h>
#define NMAX 30

int input(int *a, int *n);
double mean(int *a, int n);
double variance(int *a, int n);
int search(int *a, int n);

int main() {
    int n, data[NMAX];
    if (input(data, &n)) {
        printf("%d", search(data, n));
    } else {
        printf("n/a");
    }

    return 0;
}

int input(int *a, int *n) {
    char term;
    int return_code = 1;
    if (scanf("%d%c", n, &term) != 2 || term != '\n' || *n >= NMAX || *n <= 0) {
        // printf("n/a");
        return_code = 0;
    } else {
        for (int *p = a; p - a < *n; p++) {
            if (p - a == *n - 1) {
                if (scanf("%d%c", p, &term) != 2 || term != '\n') {
                    // printf("n/a");
                    return_code = 0;
                }
            } else {
                if (scanf("%d%c", p, &term) != 2 || (term != ' ' && term != '\n')) {
                    // printf("n/a");
                    return_code = 0;
                    break;
                }
            }
        }
    }
    return return_code;
}

double mean(int *a, int n) {
    double expected_value = 0;
    double doub_n = (double)n;
    for (int i = 0; i < n; i++) expected_value += a[i];
    expected_value = expected_value / doub_n;
    return expected_value;
}

double variance(int *a, int n) {
    double dispersion = 0;
    double doub_n = (double)n;
    double expected_value = mean(a, n);
    for (int i = 0; i < n; i++) dispersion += (a[i] - expected_value) * (a[i] - expected_value);
    dispersion = dispersion / doub_n;
    return dispersion;
}

int search(int *a, int n) {
    int searched = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] % 2 == 0 && a[i] >= mean(a, n) && a[i] <= mean(a, n) + 3 * sqrt(variance(a, n)) &&
            a[i] != 0) {
            searched = a[i];
            break;
        }
    }
    return searched;
}
